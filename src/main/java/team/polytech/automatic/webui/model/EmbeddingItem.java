/*
 * FastAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package team.polytech.automatic.webui.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * EmbeddingItem
 */
@JsonPropertyOrder({
  EmbeddingItem.JSON_PROPERTY_STEP,
  EmbeddingItem.JSON_PROPERTY_SD_CHECKPOINT,
  EmbeddingItem.JSON_PROPERTY_SD_CHECKPOINT_NAME,
  EmbeddingItem.JSON_PROPERTY_SHAPE,
  EmbeddingItem.JSON_PROPERTY_VECTORS
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-10-27T01:31:55.639766089+03:00[Europe/Moscow]")
public class EmbeddingItem {
  public static final String JSON_PROPERTY_STEP = "step";
  private Integer step;

  public static final String JSON_PROPERTY_SD_CHECKPOINT = "sd_checkpoint";
  private String sdCheckpoint;

  public static final String JSON_PROPERTY_SD_CHECKPOINT_NAME = "sd_checkpoint_name";
  private String sdCheckpointName;

  public static final String JSON_PROPERTY_SHAPE = "shape";
  private Integer shape;

  public static final String JSON_PROPERTY_VECTORS = "vectors";
  private Integer vectors;

  public EmbeddingItem() {
  }

  public EmbeddingItem step(Integer step) {
    
    this.step = step;
    return this;
  }

   /**
   * The number of steps that were used to train this embedding, if available
   * @return step
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_STEP)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getStep() {
    return step;
  }


  @JsonProperty(JSON_PROPERTY_STEP)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setStep(Integer step) {
    this.step = step;
  }


  public EmbeddingItem sdCheckpoint(String sdCheckpoint) {
    
    this.sdCheckpoint = sdCheckpoint;
    return this;
  }

   /**
   * The hash of the checkpoint this embedding was trained on, if available
   * @return sdCheckpoint
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SD_CHECKPOINT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getSdCheckpoint() {
    return sdCheckpoint;
  }


  @JsonProperty(JSON_PROPERTY_SD_CHECKPOINT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSdCheckpoint(String sdCheckpoint) {
    this.sdCheckpoint = sdCheckpoint;
  }


  public EmbeddingItem sdCheckpointName(String sdCheckpointName) {
    
    this.sdCheckpointName = sdCheckpointName;
    return this;
  }

   /**
   * The name of the checkpoint this embedding was trained on, if available. Note that this is the name that was used by the trainer; for a stable identifier, use &#x60;sd_checkpoint&#x60; instead
   * @return sdCheckpointName
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SD_CHECKPOINT_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getSdCheckpointName() {
    return sdCheckpointName;
  }


  @JsonProperty(JSON_PROPERTY_SD_CHECKPOINT_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSdCheckpointName(String sdCheckpointName) {
    this.sdCheckpointName = sdCheckpointName;
  }


  public EmbeddingItem shape(Integer shape) {
    
    this.shape = shape;
    return this;
  }

   /**
   * The length of each individual vector in the embedding
   * @return shape
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_SHAPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getShape() {
    return shape;
  }


  @JsonProperty(JSON_PROPERTY_SHAPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setShape(Integer shape) {
    this.shape = shape;
  }


  public EmbeddingItem vectors(Integer vectors) {
    
    this.vectors = vectors;
    return this;
  }

   /**
   * The number of vectors in the embedding
   * @return vectors
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_VECTORS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getVectors() {
    return vectors;
  }


  @JsonProperty(JSON_PROPERTY_VECTORS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setVectors(Integer vectors) {
    this.vectors = vectors;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EmbeddingItem embeddingItem = (EmbeddingItem) o;
    return Objects.equals(this.step, embeddingItem.step) &&
        Objects.equals(this.sdCheckpoint, embeddingItem.sdCheckpoint) &&
        Objects.equals(this.sdCheckpointName, embeddingItem.sdCheckpointName) &&
        Objects.equals(this.shape, embeddingItem.shape) &&
        Objects.equals(this.vectors, embeddingItem.vectors);
  }

  @Override
  public int hashCode() {
    return Objects.hash(step, sdCheckpoint, sdCheckpointName, shape, vectors);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EmbeddingItem {\n");
    sb.append("    step: ").append(toIndentedString(step)).append("\n");
    sb.append("    sdCheckpoint: ").append(toIndentedString(sdCheckpoint)).append("\n");
    sb.append("    sdCheckpointName: ").append(toIndentedString(sdCheckpointName)).append("\n");
    sb.append("    shape: ").append(toIndentedString(shape)).append("\n");
    sb.append("    vectors: ").append(toIndentedString(vectors)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

