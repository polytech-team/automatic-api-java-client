/*
 * FastAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package team.polytech.automatic.webui.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * ProgressRequest
 */
@JsonPropertyOrder({
  ProgressRequest.JSON_PROPERTY_ID_TASK,
  ProgressRequest.JSON_PROPERTY_ID_LIVE_PREVIEW,
  ProgressRequest.JSON_PROPERTY_LIVE_PREVIEW
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-10-27T01:31:55.639766089+03:00[Europe/Moscow]")
public class ProgressRequest {
  public static final String JSON_PROPERTY_ID_TASK = "id_task";
  private String idTask;

  public static final String JSON_PROPERTY_ID_LIVE_PREVIEW = "id_live_preview";
  private Integer idLivePreview = -1;

  public static final String JSON_PROPERTY_LIVE_PREVIEW = "live_preview";
  private Boolean livePreview = true;

  public ProgressRequest() {
  }

  public ProgressRequest idTask(String idTask) {
    
    this.idTask = idTask;
    return this;
  }

   /**
   * id of the task to get progress for
   * @return idTask
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ID_TASK)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getIdTask() {
    return idTask;
  }


  @JsonProperty(JSON_PROPERTY_ID_TASK)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setIdTask(String idTask) {
    this.idTask = idTask;
  }


  public ProgressRequest idLivePreview(Integer idLivePreview) {
    
    this.idLivePreview = idLivePreview;
    return this;
  }

   /**
   * id of last received last preview image
   * @return idLivePreview
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ID_LIVE_PREVIEW)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getIdLivePreview() {
    return idLivePreview;
  }


  @JsonProperty(JSON_PROPERTY_ID_LIVE_PREVIEW)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setIdLivePreview(Integer idLivePreview) {
    this.idLivePreview = idLivePreview;
  }


  public ProgressRequest livePreview(Boolean livePreview) {
    
    this.livePreview = livePreview;
    return this;
  }

   /**
   * boolean flag indicating whether to include the live preview image
   * @return livePreview
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_LIVE_PREVIEW)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getLivePreview() {
    return livePreview;
  }


  @JsonProperty(JSON_PROPERTY_LIVE_PREVIEW)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setLivePreview(Boolean livePreview) {
    this.livePreview = livePreview;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ProgressRequest progressRequest = (ProgressRequest) o;
    return Objects.equals(this.idTask, progressRequest.idTask) &&
        Objects.equals(this.idLivePreview, progressRequest.idLivePreview) &&
        Objects.equals(this.livePreview, progressRequest.livePreview);
  }

  @Override
  public int hashCode() {
    return Objects.hash(idTask, idLivePreview, livePreview);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ProgressRequest {\n");
    sb.append("    idTask: ").append(toIndentedString(idTask)).append("\n");
    sb.append("    idLivePreview: ").append(toIndentedString(idLivePreview)).append("\n");
    sb.append("    livePreview: ").append(toIndentedString(livePreview)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

