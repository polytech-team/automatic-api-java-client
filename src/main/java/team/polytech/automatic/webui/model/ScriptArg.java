/*
 * FastAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package team.polytech.automatic.webui.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;
import com.fasterxml.jackson.annotation.JsonIgnore;
import org.openapitools.jackson.nullable.JsonNullable;
import java.util.NoSuchElementException;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * ScriptArg
 */
@JsonPropertyOrder({
  ScriptArg.JSON_PROPERTY_LABEL,
  ScriptArg.JSON_PROPERTY_VALUE,
  ScriptArg.JSON_PROPERTY_MINIMUM,
  ScriptArg.JSON_PROPERTY_MAXIMUM,
  ScriptArg.JSON_PROPERTY_STEP,
  ScriptArg.JSON_PROPERTY_CHOICES
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-10-27T01:31:55.639766089+03:00[Europe/Moscow]")
public class ScriptArg {
  public static final String JSON_PROPERTY_LABEL = "label";
  private String label;

  public static final String JSON_PROPERTY_VALUE = "value";
  private JsonNullable<Object> value = JsonNullable.<Object>of(null);

  public static final String JSON_PROPERTY_MINIMUM = "minimum";
  private JsonNullable<Object> minimum = JsonNullable.<Object>of(null);

  public static final String JSON_PROPERTY_MAXIMUM = "maximum";
  private JsonNullable<Object> maximum = JsonNullable.<Object>of(null);

  public static final String JSON_PROPERTY_STEP = "step";
  private JsonNullable<Object> step = JsonNullable.<Object>of(null);

  public static final String JSON_PROPERTY_CHOICES = "choices";
  private List<String> choices;

  public ScriptArg() {
  }

  public ScriptArg label(String label) {
    
    this.label = label;
    return this;
  }

   /**
   * Name of the argument in UI
   * @return label
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_LABEL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getLabel() {
    return label;
  }


  @JsonProperty(JSON_PROPERTY_LABEL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setLabel(String label) {
    this.label = label;
  }


  public ScriptArg value(Object value) {
    this.value = JsonNullable.<Object>of(value);
    
    return this;
  }

   /**
   * Default value of the argument
   * @return value
  **/
  @javax.annotation.Nullable
  @JsonIgnore

  public Object getValue() {
        return value.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_VALUE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Object> getValue_JsonNullable() {
    return value;
  }
  
  @JsonProperty(JSON_PROPERTY_VALUE)
  public void setValue_JsonNullable(JsonNullable<Object> value) {
    this.value = value;
  }

  public void setValue(Object value) {
    this.value = JsonNullable.<Object>of(value);
  }


  public ScriptArg minimum(Object minimum) {
    this.minimum = JsonNullable.<Object>of(minimum);
    
    return this;
  }

   /**
   * Minimum allowed value for the argumentin UI
   * @return minimum
  **/
  @javax.annotation.Nullable
  @JsonIgnore

  public Object getMinimum() {
        return minimum.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_MINIMUM)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Object> getMinimum_JsonNullable() {
    return minimum;
  }
  
  @JsonProperty(JSON_PROPERTY_MINIMUM)
  public void setMinimum_JsonNullable(JsonNullable<Object> minimum) {
    this.minimum = minimum;
  }

  public void setMinimum(Object minimum) {
    this.minimum = JsonNullable.<Object>of(minimum);
  }


  public ScriptArg maximum(Object maximum) {
    this.maximum = JsonNullable.<Object>of(maximum);
    
    return this;
  }

   /**
   * Maximum allowed value for the argumentin UI
   * @return maximum
  **/
  @javax.annotation.Nullable
  @JsonIgnore

  public Object getMaximum() {
        return maximum.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_MAXIMUM)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Object> getMaximum_JsonNullable() {
    return maximum;
  }
  
  @JsonProperty(JSON_PROPERTY_MAXIMUM)
  public void setMaximum_JsonNullable(JsonNullable<Object> maximum) {
    this.maximum = maximum;
  }

  public void setMaximum(Object maximum) {
    this.maximum = JsonNullable.<Object>of(maximum);
  }


  public ScriptArg step(Object step) {
    this.step = JsonNullable.<Object>of(step);
    
    return this;
  }

   /**
   * Step for changing value of the argumentin UI
   * @return step
  **/
  @javax.annotation.Nullable
  @JsonIgnore

  public Object getStep() {
        return step.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_STEP)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Object> getStep_JsonNullable() {
    return step;
  }
  
  @JsonProperty(JSON_PROPERTY_STEP)
  public void setStep_JsonNullable(JsonNullable<Object> step) {
    this.step = step;
  }

  public void setStep(Object step) {
    this.step = JsonNullable.<Object>of(step);
  }


  public ScriptArg choices(List<String> choices) {
    
    this.choices = choices;
    return this;
  }

  public ScriptArg addChoicesItem(String choicesItem) {
    if (this.choices == null) {
      this.choices = new ArrayList<>();
    }
    this.choices.add(choicesItem);
    return this;
  }

   /**
   * Possible values for the argument
   * @return choices
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CHOICES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<String> getChoices() {
    return choices;
  }


  @JsonProperty(JSON_PROPERTY_CHOICES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setChoices(List<String> choices) {
    this.choices = choices;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ScriptArg scriptArg = (ScriptArg) o;
    return Objects.equals(this.label, scriptArg.label) &&
        equalsNullable(this.value, scriptArg.value) &&
        equalsNullable(this.minimum, scriptArg.minimum) &&
        equalsNullable(this.maximum, scriptArg.maximum) &&
        equalsNullable(this.step, scriptArg.step) &&
        Objects.equals(this.choices, scriptArg.choices);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(label, hashCodeNullable(value), hashCodeNullable(minimum), hashCodeNullable(maximum), hashCodeNullable(step), choices);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ScriptArg {\n");
    sb.append("    label: ").append(toIndentedString(label)).append("\n");
    sb.append("    value: ").append(toIndentedString(value)).append("\n");
    sb.append("    minimum: ").append(toIndentedString(minimum)).append("\n");
    sb.append("    maximum: ").append(toIndentedString(maximum)).append("\n");
    sb.append("    step: ").append(toIndentedString(step)).append("\n");
    sb.append("    choices: ").append(toIndentedString(choices)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

