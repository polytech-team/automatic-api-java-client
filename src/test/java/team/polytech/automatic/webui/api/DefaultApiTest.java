/*
 * FastAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package team.polytech.automatic.webui.api;

import team.polytech.automatic.webui.model.CreateResponse;
import team.polytech.automatic.webui.model.EmbeddingsResponse;
import team.polytech.automatic.webui.model.Estimation;
import team.polytech.automatic.webui.model.ExtrasBatchImagesRequest;
import team.polytech.automatic.webui.model.ExtrasBatchImagesResponse;
import team.polytech.automatic.webui.model.ExtrasSingleImageRequest;
import team.polytech.automatic.webui.model.ExtrasSingleImageResponse;
import team.polytech.automatic.webui.model.FaceRestorerItem;
import java.io.File;
import team.polytech.automatic.webui.model.Flags;
import team.polytech.automatic.webui.model.HTTPValidationError;
import team.polytech.automatic.webui.model.HypernetworkItem;
import team.polytech.automatic.webui.model.ImageToImageResponse;
import team.polytech.automatic.webui.model.InterrogateRequest;
import team.polytech.automatic.webui.model.LatentUpscalerModeItem;
import team.polytech.automatic.webui.model.MemoryResponse;
import team.polytech.automatic.webui.model.ModulesApiModelsProgressResponse;
import team.polytech.automatic.webui.model.ModulesProgressProgressResponse;
import team.polytech.automatic.webui.model.Options;
import team.polytech.automatic.webui.model.PNGInfoRequest;
import team.polytech.automatic.webui.model.PNGInfoResponse;
import team.polytech.automatic.webui.model.PredictBody;
import team.polytech.automatic.webui.model.PreprocessResponse;
import team.polytech.automatic.webui.model.ProgressRequest;
import team.polytech.automatic.webui.model.PromptStyleItem;
import team.polytech.automatic.webui.model.QuicksettingsHint;
import team.polytech.automatic.webui.model.RealesrganItem;
import team.polytech.automatic.webui.model.ResetBody;
import team.polytech.automatic.webui.model.SDModelItem;
import team.polytech.automatic.webui.model.SDVaeItem;
import team.polytech.automatic.webui.model.SamplerItem;
import team.polytech.automatic.webui.model.ScriptInfo;
import team.polytech.automatic.webui.model.ScriptsList;
import team.polytech.automatic.webui.model.StableDiffusionProcessingImg2Img;
import team.polytech.automatic.webui.model.StableDiffusionProcessingTxt2Img;
import team.polytech.automatic.webui.model.TextToImageResponse;
import team.polytech.automatic.webui.model.TrainResponse;
import team.polytech.automatic.webui.model.UpscalerItem;
import org.junit.Test;
import org.junit.Ignore;

import java.time.LocalDate;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DefaultApi
 */
@Ignore
public class DefaultApiTest {

    private final DefaultApi api = new DefaultApi();

    
    /**
     * Api Info
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiInfoInfoGetTest() {
        Boolean serialize = null;
        Object response = api.apiInfoInfoGet(serialize);

        // TODO: test validations
    }
    
    /**
     * Api Info
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiInfoInfoGet_0Test() {
        Boolean serialize = null;
        Object response = api.apiInfoInfoGet_0(serialize);

        // TODO: test validations
    }
    
    /**
     * App Id
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void appIdAppIdGetTest() {
        Object response = api.appIdAppIdGet();

        // TODO: test validations
    }
    
    /**
     * App Id
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void appIdAppIdGet_0Test() {
        Object response = api.appIdAppIdGet_0();

        // TODO: test validations
    }
    
    /**
     * Build Resource
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void buildResourceAssetsPathGetTest() {
        String path = null;
        Object response = api.buildResourceAssetsPathGet(path);

        // TODO: test validations
    }
    
    /**
     * Create Embedding
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createEmbeddingSdapiV1CreateEmbeddingPostTest() {
        Object body = null;
        CreateResponse response = api.createEmbeddingSdapiV1CreateEmbeddingPost(body);

        // TODO: test validations
    }
    
    /**
     * Create Hypernetwork
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createHypernetworkSdapiV1CreateHypernetworkPostTest() {
        Object body = null;
        CreateResponse response = api.createHypernetworkSdapiV1CreateHypernetworkPost(body);

        // TODO: test validations
    }
    
    /**
     * Download Sysinfo
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void downloadSysinfoInternalSysinfoGetTest() {
        Object attachment = null;
        Object response = api.downloadSysinfoInternalSysinfoGet(attachment);

        // TODO: test validations
    }
    
    /**
     * Extras Batch Images Api
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void extrasBatchImagesApiSdapiV1ExtraBatchImagesPostTest() {
        ExtrasBatchImagesRequest extrasBatchImagesRequest = null;
        ExtrasBatchImagesResponse response = api.extrasBatchImagesApiSdapiV1ExtraBatchImagesPost(extrasBatchImagesRequest);

        // TODO: test validations
    }
    
    /**
     * Extras Single Image Api
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void extrasSingleImageApiSdapiV1ExtraSingleImagePostTest() {
        ExtrasSingleImageRequest extrasSingleImageRequest = null;
        ExtrasSingleImageResponse response = api.extrasSingleImageApiSdapiV1ExtraSingleImagePost(extrasSingleImageRequest);

        // TODO: test validations
    }
    
    /**
     * Favicon
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void faviconFaviconIcoGetTest() {
        Object response = api.faviconFaviconIcoGet();

        // TODO: test validations
    }
    
    /**
     * Fetch File
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void fetchFileSdExtraNetworksThumbGetTest() {
        String filename = null;
        Object response = api.fetchFileSdExtraNetworksThumbGet(filename);

        // TODO: test validations
    }
    
    /**
     * File Deprecated
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void fileDeprecatedFilePathGetTest() {
        String path = null;
        Object response = api.fileDeprecatedFilePathGet(path);

        // TODO: test validations
    }
    
    /**
     * File
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void fileFilePathOrUrlGetTest() {
        String pathOrUrl = null;
        Object response = api.fileFilePathOrUrlGet(pathOrUrl);

        // TODO: test validations
    }
    
    /**
     * File
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void fileFilePathOrUrlHeadTest() {
        String pathOrUrl = null;
        Object response = api.fileFilePathOrUrlHead(pathOrUrl);

        // TODO: test validations
    }
    
    /**
     * Get Cmd Flags
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getCmdFlagsSdapiV1CmdFlagsGetTest() {
        Flags response = api.getCmdFlagsSdapiV1CmdFlagsGet();

        // TODO: test validations
    }
    
    /**
     * Get Config
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getConfigConfigGetTest() {
        Object response = api.getConfigConfigGet();

        // TODO: test validations
    }
    
    /**
     * Get Config
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getConfigConfigGet_0Test() {
        Object response = api.getConfigConfigGet_0();

        // TODO: test validations
    }
    
    /**
     * Get Config
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getConfigSdapiV1OptionsGetTest() {
        Map<String, Object> response = api.getConfigSdapiV1OptionsGet();

        // TODO: test validations
    }
    
    /**
     * Get Current User
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getCurrentUserUserGetTest() {
        String response = api.getCurrentUserUserGet();

        // TODO: test validations
    }
    
    /**
     * Get Current User
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getCurrentUserUserGet_0Test() {
        String response = api.getCurrentUserUserGet_0();

        // TODO: test validations
    }
    
    /**
     * Get Embeddings
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getEmbeddingsSdapiV1EmbeddingsGetTest() {
        EmbeddingsResponse response = api.getEmbeddingsSdapiV1EmbeddingsGet();

        // TODO: test validations
    }
    
    /**
     * Get Face Restorers
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getFaceRestorersSdapiV1FaceRestorersGetTest() {
        List<FaceRestorerItem> response = api.getFaceRestorersSdapiV1FaceRestorersGet();

        // TODO: test validations
    }
    
    /**
     * Get Hypernetworks
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getHypernetworksSdapiV1HypernetworksGetTest() {
        List<HypernetworkItem> response = api.getHypernetworksSdapiV1HypernetworksGet();

        // TODO: test validations
    }
    
    /**
     * Get Latent Upscale Modes
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getLatentUpscaleModesSdapiV1LatentUpscaleModesGetTest() {
        List<LatentUpscalerModeItem> response = api.getLatentUpscaleModesSdapiV1LatentUpscaleModesGet();

        // TODO: test validations
    }
    
    /**
     * Get Loras
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getLorasSdapiV1LorasGetTest() {
        Object response = api.getLorasSdapiV1LorasGet();

        // TODO: test validations
    }
    
    /**
     * Get Memory
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getMemorySdapiV1MemoryGetTest() {
        MemoryResponse response = api.getMemorySdapiV1MemoryGet();

        // TODO: test validations
    }
    
    /**
     * Get Metadata
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getMetadataSdExtraNetworksMetadataGetTest() {
        String page = null;
        String item = null;
        Object response = api.getMetadataSdExtraNetworksMetadataGet(page, item);

        // TODO: test validations
    }
    
    /**
     * Get Prompt Styles
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPromptStylesSdapiV1PromptStylesGetTest() {
        List<PromptStyleItem> response = api.getPromptStylesSdapiV1PromptStylesGet();

        // TODO: test validations
    }
    
    /**
     * Get Queue Status
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getQueueStatusQueueStatusGetTest() {
        Estimation response = api.getQueueStatusQueueStatusGet();

        // TODO: test validations
    }
    
    /**
     * Get Realesrgan Models
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getRealesrganModelsSdapiV1RealesrganModelsGetTest() {
        List<RealesrganItem> response = api.getRealesrganModelsSdapiV1RealesrganModelsGet();

        // TODO: test validations
    }
    
    /**
     * Get Samplers
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSamplersSdapiV1SamplersGetTest() {
        List<SamplerItem> response = api.getSamplersSdapiV1SamplersGet();

        // TODO: test validations
    }
    
    /**
     * Get Script Info
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getScriptInfoSdapiV1ScriptInfoGetTest() {
        List<ScriptInfo> response = api.getScriptInfoSdapiV1ScriptInfoGet();

        // TODO: test validations
    }
    
    /**
     * Get Scripts List
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getScriptsListSdapiV1ScriptsGetTest() {
        ScriptsList response = api.getScriptsListSdapiV1ScriptsGet();

        // TODO: test validations
    }
    
    /**
     * Get Sd Models
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSdModelsSdapiV1SdModelsGetTest() {
        List<SDModelItem> response = api.getSdModelsSdapiV1SdModelsGet();

        // TODO: test validations
    }
    
    /**
     * Get Sd Vaes
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSdVaesSdapiV1SdVaeGetTest() {
        List<SDVaeItem> response = api.getSdVaesSdapiV1SdVaeGet();

        // TODO: test validations
    }
    
    /**
     * Get Single Card
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSingleCardSdExtraNetworksGetSingleCardGetTest() {
        String page = null;
        String tabname = null;
        String name = null;
        Object response = api.getSingleCardSdExtraNetworksGetSingleCardGet(page, tabname, name);

        // TODO: test validations
    }
    
    /**
     * Get Token
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getTokenTokenGetTest() {
        Object response = api.getTokenTokenGet();

        // TODO: test validations
    }
    
    /**
     * Get Token
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getTokenTokenGet_0Test() {
        Object response = api.getTokenTokenGet_0();

        // TODO: test validations
    }
    
    /**
     * Get Upscalers
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getUpscalersSdapiV1UpscalersGetTest() {
        List<UpscalerItem> response = api.getUpscalersSdapiV1UpscalersGet();

        // TODO: test validations
    }
    
    /**
     * Img2Imgapi
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void img2imgapiSdapiV1Img2imgPostTest() {
        StableDiffusionProcessingImg2Img stableDiffusionProcessingImg2Img = null;
        ImageToImageResponse response = api.img2imgapiSdapiV1Img2imgPost(stableDiffusionProcessingImg2Img);

        // TODO: test validations
    }
    
    /**
     * Interrogateapi
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void interrogateapiSdapiV1InterrogatePostTest() {
        InterrogateRequest interrogateRequest = null;
        Object response = api.interrogateapiSdapiV1InterrogatePost(interrogateRequest);

        // TODO: test validations
    }
    
    /**
     * Interruptapi
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void interruptapiSdapiV1InterruptPostTest() {
        Object response = api.interruptapiSdapiV1InterruptPost();

        // TODO: test validations
    }
    
    /**
     * &lt;Lambda&gt;
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void lambdaInternalPingGetTest() {
        Object response = api.lambdaInternalPingGet();

        // TODO: test validations
    }
    
    /**
     * &lt;Lambda&gt;
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void lambdaInternalProfileStartupGetTest() {
        Object response = api.lambdaInternalProfileStartupGet();

        // TODO: test validations
    }
    
    /**
     * &lt;Lambda&gt;
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void lambdaInternalSysinfoDownloadGetTest() {
        Object response = api.lambdaInternalSysinfoDownloadGet();

        // TODO: test validations
    }
    
    /**
     * Login Check
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void loginCheckLoginCheckGetTest() {
        Object response = api.loginCheckLoginCheckGet();

        // TODO: test validations
    }
    
    /**
     * Login Check
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void loginCheckLoginCheckGet_0Test() {
        Object response = api.loginCheckLoginCheckGet_0();

        // TODO: test validations
    }
    
    /**
     * Login
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void loginLoginPostTest() {
        String username = null;
        String password = null;
        String grantType = null;
        String scope = null;
        String clientId = null;
        String clientSecret = null;
        Object response = api.loginLoginPost(username, password, grantType, scope, clientId, clientSecret);

        // TODO: test validations
    }
    
    /**
     * Login
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void loginLoginPost_0Test() {
        String username = null;
        String password = null;
        String grantType = null;
        String scope = null;
        String clientId = null;
        String clientSecret = null;
        Object response = api.loginLoginPost_0(username, password, grantType, scope, clientId, clientSecret);

        // TODO: test validations
    }
    
    /**
     * Main
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void mainGetTest() {
        String response = api.mainGet();

        // TODO: test validations
    }
    
    /**
     * Main
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void mainHeadTest() {
        String response = api.mainHead();

        // TODO: test validations
    }
    
    /**
     * Pnginfoapi
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void pnginfoapiSdapiV1PngInfoPostTest() {
        PNGInfoRequest pnGInfoRequest = null;
        PNGInfoResponse response = api.pnginfoapiSdapiV1PngInfoPost(pnGInfoRequest);

        // TODO: test validations
    }
    
    /**
     * Predict
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void predictApiApiNamePostTest() {
        String apiName = null;
        PredictBody predictBody = null;
        Object response = api.predictApiApiNamePost(apiName, predictBody);

        // TODO: test validations
    }
    
    /**
     * Predict
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void predictApiApiNamePost_0Test() {
        String apiName = null;
        PredictBody predictBody = null;
        Object response = api.predictApiApiNamePost_0(apiName, predictBody);

        // TODO: test validations
    }
    
    /**
     * Predict
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void predictRunApiNamePostTest() {
        String apiName = null;
        PredictBody predictBody = null;
        Object response = api.predictRunApiNamePost(apiName, predictBody);

        // TODO: test validations
    }
    
    /**
     * Predict
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void predictRunApiNamePost_0Test() {
        String apiName = null;
        PredictBody predictBody = null;
        Object response = api.predictRunApiNamePost_0(apiName, predictBody);

        // TODO: test validations
    }
    
    /**
     * Preprocess
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void preprocessSdapiV1PreprocessPostTest() {
        Object body = null;
        PreprocessResponse response = api.preprocessSdapiV1PreprocessPost(body);

        // TODO: test validations
    }
    
    /**
     * Progressapi
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void progressapiInternalProgressPostTest() {
        ProgressRequest progressRequest = null;
        ModulesProgressProgressResponse response = api.progressapiInternalProgressPost(progressRequest);

        // TODO: test validations
    }
    
    /**
     * Progressapi
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void progressapiSdapiV1ProgressGetTest() {
        Boolean skipCurrentImage = null;
        ModulesApiModelsProgressResponse response = api.progressapiSdapiV1ProgressGet(skipCurrentImage);

        // TODO: test validations
    }
    
    /**
     * Quicksettings Hint
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void quicksettingsHintInternalQuicksettingsHintGetTest() {
        List<QuicksettingsHint> response = api.quicksettingsHintInternalQuicksettingsHintGet();

        // TODO: test validations
    }
    
    /**
     * Refresh Checkpoints
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void refreshCheckpointsSdapiV1RefreshCheckpointsPostTest() {
        Object response = api.refreshCheckpointsSdapiV1RefreshCheckpointsPost();

        // TODO: test validations
    }
    
    /**
     * Refresh Loras
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void refreshLorasSdapiV1RefreshLorasPostTest() {
        Object response = api.refreshLorasSdapiV1RefreshLorasPost();

        // TODO: test validations
    }
    
    /**
     * Refresh Vae
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void refreshVaeSdapiV1RefreshVaePostTest() {
        Object response = api.refreshVaeSdapiV1RefreshVaePost();

        // TODO: test validations
    }
    
    /**
     * Reloadapi
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void reloadapiSdapiV1ReloadCheckpointPostTest() {
        Object response = api.reloadapiSdapiV1ReloadCheckpointPost();

        // TODO: test validations
    }
    
    /**
     * Reset Iterator
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void resetIteratorResetPostTest() {
        ResetBody resetBody = null;
        Object response = api.resetIteratorResetPost(resetBody);

        // TODO: test validations
    }
    
    /**
     * Reset Iterator
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void resetIteratorResetPost_0Test() {
        ResetBody resetBody = null;
        Object response = api.resetIteratorResetPost_0(resetBody);

        // TODO: test validations
    }
    
    /**
     * Reverse Proxy
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void reverseProxyProxyUrlPathGetTest() {
        String urlPath = null;
        Object response = api.reverseProxyProxyUrlPathGet(urlPath);

        // TODO: test validations
    }
    
    /**
     * Reverse Proxy
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void reverseProxyProxyUrlPathHeadTest() {
        String urlPath = null;
        Object response = api.reverseProxyProxyUrlPathHead(urlPath);

        // TODO: test validations
    }
    
    /**
     * Robots Txt
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void robotsTxtRobotsTxtGetTest() {
        String response = api.robotsTxtRobotsTxtGet();

        // TODO: test validations
    }
    
    /**
     * Set Config
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setConfigSdapiV1OptionsPostTest() {
        Object body = null;
        Object response = api.setConfigSdapiV1OptionsPost(body);

        // TODO: test validations
    }
    
    /**
     * Skip
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void skipSdapiV1SkipPostTest() {
        Object response = api.skipSdapiV1SkipPost();

        // TODO: test validations
    }
    
    /**
     * Startup Events
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void startupEventsStartupEventsGetTest() {
        Object response = api.startupEventsStartupEventsGet();

        // TODO: test validations
    }
    
    /**
     * Static Resource
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void staticResourceStaticPathGetTest() {
        String path = null;
        Object response = api.staticResourceStaticPathGet(path);

        // TODO: test validations
    }
    
    /**
     * Stream
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void streamStreamSessionHashRunComponentIdGetTest() {
        String sessionHash = null;
        Integer run = null;
        Integer componentId = null;
        Object response = api.streamStreamSessionHashRunComponentIdGet(sessionHash, run, componentId);

        // TODO: test validations
    }
    
    /**
     * Text2Imgapi
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void text2imgapiSdapiV1Txt2imgPostTest() {
        StableDiffusionProcessingTxt2Img stableDiffusionProcessingTxt2Img = null;
        TextToImageResponse response = api.text2imgapiSdapiV1Txt2imgPost(stableDiffusionProcessingTxt2Img);

        // TODO: test validations
    }
    
    /**
     * Theme Css
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void themeCssThemeCssGetTest() {
        String response = api.themeCssThemeCssGet();

        // TODO: test validations
    }
    
    /**
     * Train Embedding
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void trainEmbeddingSdapiV1TrainEmbeddingPostTest() {
        Object body = null;
        TrainResponse response = api.trainEmbeddingSdapiV1TrainEmbeddingPost(body);

        // TODO: test validations
    }
    
    /**
     * Train Hypernetwork
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void trainHypernetworkSdapiV1TrainHypernetworkPostTest() {
        Object body = null;
        TrainResponse response = api.trainHypernetworkSdapiV1TrainHypernetworkPost(body);

        // TODO: test validations
    }
    
    /**
     * Unloadapi
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void unloadapiSdapiV1UnloadCheckpointPostTest() {
        Object response = api.unloadapiSdapiV1UnloadCheckpointPost();

        // TODO: test validations
    }
    
    /**
     * Upload File
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void uploadFileUploadPostTest() {
        List<File> files = null;
        Object response = api.uploadFileUploadPost(files);

        // TODO: test validations
    }
    
}
